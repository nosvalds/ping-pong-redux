{"version":3,"sources":["components/Header.js","components/GameHistory/GameHistory.js","axios/axios.js","data/actions/api.js","data/actions/state.js","components/GameHistory/index.js","components/Settings/Settings.js","components/Settings/index.js","components/Loading/Loading.js","components/Loading/index.js","components/LanguageSelection/LanguageSelection.js","components/LanguageSelection/index.js","components/ScoreCard/ScoreCard.js","components/ScoreCard/ScoreCard1.js","components/ScoreCard/ScoreCard2.js","components/Winner/Winner.js","components/Winner/index.js","components/GamePlay/GamePlay.js","components/GamePlay/index.js","components/App/App.js","components/App/index.js","data/initial.js","data/reducer.js","data/store.js","index.js"],"names":["Header","title","className","class","GameHistory","gameHistory","language","handleDelete","handleContinue","translations","game_history","scope","game","player","wins","loss","score","actions","map","i","Fragment","key","rowSpan","id","player_1","name","complete","won","not_complete","onClick","continue","player_2","icon","faTrashAlt","axios","create","baseURL","headers","Accept","Authorization","patchScore","dispatch","getState","gameId","patch","then","data","winner","type","player1","player2","server","serving","updateScore","getGameHistory","get","saveHistory","connect","delete","removeGame","deleteGame","player1Name","player2Name","winningScore","winning_score","serveInterval","change_serve","resumeGame","getResumeGame","Settings","handleSubmit","useState","player1NameInput","setPlayer1NameInput","player2NameInput","setPlayer2NameInput","winningScoreInput","setWinningScoreInput","serveIntervalInput","setServeIntervalInput","onSubmit","e","preventDefault","htmlFor","value","onChange","currentTarget","alt_serve","start_game","post","startGame","postStartGame","Loading","this","props","loaded","handleMount","children","style","width","Component","historyLoaded","LanguageSelection","handleLanguage","data-toggle","faGlobeAmericas","ScoreCard","handleIncrement","gameOver","playerName","disabled","faPlusSquare","Winner","GamePlay","handleNewGame","ScoreCard1","ScoreCard2","new_game","App","showSettings","initial","reducer","state","action","newGame","toggleLanguage","filter","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72b9469d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = ({ title }) => (\n    <header className=\"jumbotron mt-1 mb-4 bg-primary\">\n            <h1 \n                className=\"text-light display-3\"\n            >\n                { title }\n            </h1>\n            <p class=\"lead text-light\">The ping pong scoring web app built with React and Redux.</p>\n    </header>\n)\n\nexport default Header;","import React from 'react';\nimport translations from '../translations.json'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons'\n\nconst GameHistory = ({ \n    gameHistory, \n    language, \n    handleDelete,\n    handleContinue,\n }) => (\n    <div className=\"container\">\n        <h4 className=\"p-4 m-0 bg-info text-white border border-info rounded text-center\">\n            {translations.game_history[language]}\n        </h4>\n        <table className=\"table border border-secondary rounded table-striped bg-light\">\n            <thead className=\"thead-light\">\n                <tr>\n                    <th scope=\"col\">{translations.game[language] + \" #\"}</th>\n                    <th scope=\"col\">{translations.player[language]}</th>\n                    <th scope=\"col\">\n                        {translations.wins[language] + \"/\" + translations.loss[language]}\n                    </th>\n                    <th scope=\"col\">{ translations.score[language] }</th>\n                    <th scope=\"col\">{ translations.actions[language] }</th>\n                </tr>\n            </thead>\n            <tbody>\n                { gameHistory.map((game, i) => (\n                    <React.Fragment key= { i }>\n                        <tr>\n                            <th scope=\"row\" rowSpan=\"2\">{ game.id }</th>\n                            <td>\n                                {`${translations.player[language]} 1: ${game.player_1.name}`}\n                            </td>\n                            { game.complete ? (game.player_1.won ?\n                                <td className=\"table-success\">\n                                    { translations.wins[language] }\n                                </td> : \n                                <td className=\"table-danger\">\n                                    { translations.loss[language] }\n                                </td>) :\n                                <th \n                                    className=\"table-warning\" \n                                    scope=\"row\" \n                                    rowSpan=\"2\"\n                                >\n                                    { translations.not_complete[language] }\n                                </th>\n                            }\n                            <td>{ game.player_1.score }</td>\n                            <td>\n                                { !game.complete ? \n                                    <button\n                                        className=\"btn btn-outline-primary btn-sm\"\n                                        onClick={ () => handleContinue(game.id) } // load the game where it left off\n                                    >\n                                        {translations.continue[language]}\n                                    </button> :\n                                    null\n                                }\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                {`${translations.player[language]} 2: ${game.player_2.name}`}\n                            </td>\n                            { game.complete ? (game.player_2.won ?\n                                <td className=\"table-success\">\n                                    { translations.wins[language] }\n                                </td> : \n                                <td className=\"table-danger\">\n                                    { translations.loss[language] }\n                                </td>) : null\n                            }\n                            <td>{ game.player_2.score }</td>\n                            <td>\n                                <button\n                                    className=\"btn btn-outline-danger btn-sm\"\n                                    onClick={ () => handleDelete(game.id) }\n                                >\n                                    <FontAwesomeIcon icon={faTrashAlt} />\n                                </button>\n                            </td>\n                        </tr>\n                    </React.Fragment>\n                ))}\n            </tbody>\n        </table>\n    </div>\n);\n\nexport default GameHistory;","import axios from 'axios';\n\nexport default axios.create({\n    baseURL: \"https://restful.training/api/ping-pong/games\",\n    headers: {\n        Accept: \"application/json\",\n        Authorization: \"Bearer PHMiSM4uqpLgY0CuAeS97fDz55A9AepQR0FrhCFvsbn9SJzjKl0cMtswdBBFRxuntN90wECzmCQ8Ep38\"\n    }\n})","import axios from '../../axios/axios';\nimport { \n    startGame, \n    updateScore, \n    saveHistory, \n    removeGame,\n    resumeGame \n} from './state';\n\nexport const postStartGame = ({ \n        player1Name, \n        player2Name, \n        serveInterval, \n        winningScore\n    }) => {\n    return (dispatch) => {\n        axios.post(\"/\", {\n            player_1: player1Name,\n            player_2: player2Name,\n            winning_score: winningScore,\n            change_serve: serveInterval\n        }).then(({ data }) => {\n            dispatch(startGame(data.data))\n        })\n    };\n}\n\nexport const patchScore = player => (dispatch, getState) => {\n    // use getState function to get the state object\n    // then read the currentGameID property\n    const id = getState().gameId;\n\n    axios.patch(`${id}/score`,{\n        player: player,\n    }).then(({ data }) => {\n        // dispatch state action\n        dispatch(updateScore(data.data));\n    });\n};\n\nexport const getGameHistory = () => (dispatch) => {\n    axios.get(\"/\").then(({ data }) => {\n        dispatch(saveHistory(data.data))\n    })\n}\n\nexport const deleteGame = (id) => {\n    return (dispatch) => {\n        axios.delete(`${id}`).then(() => {\n            dispatch(removeGame(id)) \n        })\n    }\n}\n\nexport const getResumeGame = (id) => {\n    return (dispatch) => {\n        axios.get(`${id}`).then(({ data }) => {\n            if (!data.data.complete) {\n                dispatch(resumeGame(data.data));\n            } else {\n                getGameHistory();\n            }\n        })\n    };\n}","export const updateScore = (data) => {\n    let winner = 0;\n    if (data.player_1.won) {\n        winner = 1;\n    } else if (data.player_2.won) {\n        winner = 2;\n    }\n    return {\n        type: \"UPDATE_SCORE\",\n        player1: data.player_1.score,\n        player2: data.player_2.score,\n        server: data.player_1.serving ? 1 : 2,\n        winner: winner,\n    }\n}\n\nexport const newGame = () => {\n    return {\n        type: \"NEW_GAME\"\n    }\n}\n\nexport const toggleLanguage = () => {\n    return {\n        type: \"TOGGLE_LANGUAGE\"\n    }\n}\n\nexport const startGame = (data) => {\n    return {\n        type: \"START_GAME\",\n        gameId: data.id,\n        player1Name: data.player_1.name,\n        player2Name: data.player_2.name,\n        winningScore: +data.winning_score,\n        serveInterval: +data.change_serve\n    }\n}\n\nexport const saveHistory = (data) => {\n    return {\n        type: \"SAVE_HISTORY\",\n        gameHistory: data,\n    }\n}\n\nexport const removeGame = (id) => {\n    return {\n        type: \"REMOVE_GAME\",\n        id,\n    }\n}\n\nexport const resumeGame = (data) => {\n    return {\n        type: \"RESUME_GAME\",\n        gameId: data.id,\n        player1: data.player_1.score,\n        player2: data.player_2.score,\n        player1Name: data.player_1.name,\n        player2Name: data.player_2.name,\n        winningScore: +data.winning_score,\n        serveInterval: +data.change_serve,\n        server: data.player_1.serving ? 1 : 2,\n    }\n}","import { connect } from 'react-redux';\nimport GameHistory from './GameHistory';\nimport { deleteGame, getResumeGame } from '../../data/actions/api'\n\nconst mapStateToProps = ({\n    gameHistory, \n    language\n}) => ({ \n    gameHistory, \n    language\n })\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleDelete: (id) => dispatch(deleteGame(id)),\n        handleContinue: (id) => dispatch(getResumeGame(id))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GameHistory);","import React, { useState } from 'react';\nimport translations from '../../components/translations';\n\nconst Settings = ({ \n    handleSubmit, \n    player1Name, \n    player2Name, \n    winningScore, \n    serveInterval, \n    language \n}) => {\n    const [player1NameInput, setPlayer1NameInput] = useState(player1Name);\n    const [player2NameInput, setPlayer2NameInput] = useState(player2Name);\n    const [winningScoreInput, setWinningScoreInput] = useState(winningScore);\n    const [serveIntervalInput, setServeIntervalInput] = useState(serveInterval);\n\n    const handleFormSubmit = (e) => {\n        e.preventDefault();\n        handleSubmit(\n            {\n                player1Name: player1NameInput,\n                player2Name: player2NameInput,\n                winningScore: winningScoreInput,\n                serveInterval: serveIntervalInput\n            }\n        )\n    }\n    return (\n        <div className=\"container p-5\">\n            <form \n                onSubmit={ handleFormSubmit } \n                className=\"mb-4 p-5 border border-warning rounded bg-light\"\n            >\n                <h3 className=\"text-center border-bottom pb-4\">New Game - Settings</h3>\n                <div className=\"form-group\">\n                    <label htmlFor=\"player1Name\">\n                        {`${translations.player[language]} 1 ${translations.name[language]}`}\n                    </label>\n                    <input\n                        className=\"form-control\"\n                        type=\"text\"\n                        id=\"player1Name\"\n                        value={ player1NameInput }\n                        onChange={ (e) => setPlayer1NameInput(e.currentTarget.value) }\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"player2Name\">\n                        {`${translations.player[language]} 2 ${translations.name[language]}`}\n                    </label>\n                    <input\n                        className=\"form-control\"\n                        type=\"text\"\n                        id=\"player2Name\"\n                        value={ player2NameInput }\n                        onChange={ (e) => setPlayer2NameInput(e.currentTarget.value) }\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"winningScore\" >\n                        {`${translations.winning_score[language]}`}\n                    </label>\n                    <input\n                        className=\"form-control\"\n                        type=\"number\"\n                        id=\"winningScore\"\n                        value={ winningScoreInput }\n                        onChange={ (e) => setWinningScoreInput(e.currentTarget.value) }\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"alternateServe\">\n                        {`${translations.alt_serve[language]}:`}\n                    </label>\n                    <select \n                        className=\"form-control\" \n                        id=\"alternateServe\"\n                        value={ serveIntervalInput }\n                        onChange={ (e) => setServeIntervalInput(e.currentTarget.value) }\n                    >\n                        <option>1</option>\n                        <option>2</option>\n                        <option>3</option>\n                        <option>4</option>\n                        <option>5</option>\n                    </select>\n                </div>\n                <button \n                    type=\"submit\"\n                    className=\"btn btn-success\"\n                >\n                    {`${translations.start_game[language]}`}\n                </button>\n            </form>\n        </div>\n    )\n}\n\nexport default Settings;\n","import { connect } from 'react-redux';\nimport Settings from './Settings';\nimport { postStartGame } from '../../data/actions/api';\n\nconst mapStateToProps = ({ \n    language, \n    player1Name, \n    player2Name, \n    winningScore, \n    serveInterval\n}) => ({ \n    language, \n    player1Name, \n    player2Name, \n    winningScore, \n    serveInterval \n})\n\nconst mapDispatchToProps = (dispatch) =>({\n    handleSubmit: (data) => dispatch(postStartGame(data)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);","import React, { Component } from \"react\";\n\nclass Loading extends Component {\n    componentDidMount() {\n        if (!this.props.loaded) {\n            this.props.handleMount();\n        }\n    }\n\n    render() {\n        const { children, loaded } = this.props;\n    \n        return loaded ? children : (\n            <div className=\"progress\">\n                <div\n                    className=\"progress-bar progress-bar-striped active\"\n                    style={{ width: \"100%\"}}\n                >\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Loading;","import { connect } from 'react-redux';\nimport Loading from './Loading';\nimport { getGameHistory } from '../../data/actions/api'\n\nconst mapStateToProps = ({ historyLoaded }) => {\n    return {\n        loaded: historyLoaded,\n    };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleMount: () => dispatch(getGameHistory()),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Loading);","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGlobeAmericas } from '@fortawesome/free-solid-svg-icons'\n\n\nconst LanguageSelection = ({ language, handleLanguage }) => (\n    <>\n    <div \n          className=\"btn-group btn-group-toggle pt-1\" \n          data-toggle=\"buttons\"\n        >\n          \n          <label \n            className={`btn btn-sm btn-info ${(language === \"English\") ? \"active\" : \"\"}`}\n          >\n            <input \n              type=\"radio\" \n              name=\"options\" \n              id=\"english\" \n              onChange={ handleLanguage }\n            />\n              English\n          </label>\n          <div className=\"btn btn-sm btn-secondary\">\n            <FontAwesomeIcon icon={faGlobeAmericas} />\n          </div>\n          <label \n            className={`btn btn-sm btn-info ${(language === \"Esperanto\") ? \"active\" : \"\"}`}\n          >\n            <input \n              type=\"radio\" \n              name=\"options\" \n              id=\"esperanto\"\n              onChange={ handleLanguage }\n            />\n              Esperanto\n          </label>\n        </div>\n      </>\n)\n\nexport default LanguageSelection;","import { connect } from 'react-redux';\nimport LanguageSelection from './LanguageSelection';\nimport { toggleLanguage } from '../../data/actions/state';\n\nconst mapStateToProps = ({ language }) => ({ language })\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleLanguage: () => dispatch(toggleLanguage())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LanguageSelection);","import React from 'react';\nimport translations from '../translations.json'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlusSquare } from '@fortawesome/free-solid-svg-icons'\n\nconst ScoreCard = ({ \n    server, \n    player, \n    score, \n    handleIncrement, \n    gameOver, \n    language,\n    playerName \n}) => (\n    <div className=\"col-md-6 mt-4\">\n        <div \n            className={ (server === +player ? \"bg-dark text-white \" : \"\") + \"card text-center\" }\n        >\n            <h5 className=\"card-header\">\n                {`${translations.player[language]} ${player}: ${playerName}`}\n            </h5>\n            <div className=\"card-body\">\n                <p className=\"card-text display-1\">{ score }</p>\n            </div>\n            <div className=\"card-footer\">\n                <button \n                    className=\"form-control btn btn-success\"\n                    onClick={ () => handleIncrement(player) }\n                    disabled={ gameOver }\n                >\n                    <FontAwesomeIcon icon={faPlusSquare} />\n                </button>\n            </div>\n        </div>\n    </div>\n);\n\nexport default ScoreCard;","import { connect } from 'react-redux';\nimport ScoreCard from './ScoreCard';\nimport { patchScore } from '../../data/actions/api';\n\n// Tricks\n// 1. Descruturing\n// 2. Auto-key naming\n// 3. Fat arrow single line\n\n// naming convention is mapStateToProps. ownProps is normal props being passed in to the component\nconst mapStateToProps = ({ \n        server, \n        player1, \n        language, \n        winner, \n        player1Name\n}) => ({\n        server, // equivalent to server: server\n        score: player1,\n        language, // equivalent to language: language\n        gameOver: winner !== 0,\n        playerName: player1Name\n});\n\n// second parameter is ownProps like mapStateToProps\nconst mapDispatchToProps = (dispatch) => ({\n        handleIncrement: (player) => dispatch(patchScore(player))\n})\n\n// connect calls mapStateToProps when changes occur in our component\nexport default connect(mapStateToProps, mapDispatchToProps)(ScoreCard)\n","import { connect } from 'react-redux';\nimport ScoreCard from './ScoreCard';\nimport { patchScore } from '../../data/actions/api';\n\n\nconst mapStateToProps = ({ server, player2, language, winner, player2Name}) => {\n    return {\n        server,\n        score: player2,\n        language,\n        gameOver: winner !== 0,\n        playerName: player2Name,\n    };\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    handleIncrement: (player) => dispatch(patchScore(player))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ScoreCard)\n","import React from 'react';\nimport translations from '../translations.json'\n\nconst Winner = ({ winner, language }) => (\n    winner !== 0 ?\n    <h2 \n        className=\"alert alert-success\"\n    >\n        {`${translations.player[language]} ${ winner } ${translations.wins[language]}!`}\n    </h2>\n    : null\n)\n\nexport default Winner;","import { connect } from 'react-redux';\nimport Winner from './Winner';\n\nconst mapStateToProps = ({winner, language}) => ({ winner, language})\n\nexport default connect(mapStateToProps)(Winner);","import React from 'react';\nimport ScoreCard1 from \"../ScoreCard/ScoreCard1\";\nimport ScoreCard2 from \"../ScoreCard/ScoreCard2\";\nimport Winner from '../Winner'\nimport translations from '../translations'\n\nconst GamePlay = ({ language, gameId, handleNewGame }) => (\n    <>\n        <h3 \n            class=\"text-center bg-warning w-50 m-auto p-4 border border-warning rounded\"\n        >\n            {`${translations.game[language]} # ${gameId}` }\n        </h3>\n        {/* gameplay scores section */}\n        <div className=\"row mb-4\">\n            <ScoreCard1 \n            player={ 1 }\n            />\n            <ScoreCard2 \n            player={ 2 }\n            />\n        </div>\n\n        { /* winner message */}\n        <Winner />\n\n        <hr />\n\n        { /* New Game button */}\n        <div className=\"d-flex justify-content-center\">\n            <button \n            className=\"btn btn-primary\"\n            onClick={ handleNewGame }\n            >\n            { translations.new_game[language] }\n            </button>\n        </div>\n\n        <hr />\n    </>\n)\n\nexport default GamePlay;","import { connect } from 'react-redux';\nimport GamePlay from './GamePlay';\nimport { newGame } from '../../data/actions/state';\nimport { getGameHistory } from '../../data/actions/api';\n\nconst mapStateToProps = ({ language, gameId }) => ({ language, gameId })\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleNewGame: () => {\n            dispatch(newGame())\n            dispatch(getGameHistory())\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GamePlay);","import React from \"react\";\nimport Header from \"../Header\";\nimport GameHistory from \"../GameHistory\";\nimport Settings from \"../Settings\";\nimport Loading from \"../Loading\";\nimport LanguageSelection from \"../LanguageSelection\";\nimport GamePlay from \"../GamePlay\";\n\nconst App = ({ \n  showSettings \n}) => (\n    <>\n        { /* language selection */}\n        <LanguageSelection />\n\n        {/* header */}\n        <Header title={ \"Pong Ping\" } />\n\n        {/* Settings or Gameplay */}\n        { showSettings ? \n          <Settings />\n        : \n          <GamePlay />\n        }\n        {/* Game History, wrap in loading so we show loading bar until history is loaded from the API */}\n        <Loading>\n          <GameHistory />\n        </Loading>\n    </>\n);\n\nexport default App;\n","import { connect } from 'react-redux';\nimport App from './App';\nimport { newGame, toggleLanguage } from '../../data/actions/state';\nimport { getGameHistory } from '../../data/actions/api';\n\nconst mapStateToProps = ({ language, showSettings }) => ({ language, showSettings })\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleNewGame: () => {\n            dispatch(newGame())\n            dispatch(getGameHistory())\n        },\n        handleLanguage: () => dispatch(toggleLanguage())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","const initial = {\n    gameId: \"\",\n    showSettings: true,\n    player1: 0,\n    player2: 0,\n    player1Name: \"\",\n    player2Name: \"\",\n    winningScore: 21,\n    serveInterval: 5,\n    server: 1,\n    winner: 0,\n    gameHistory: [],\n    historyLoaded: false, // for API request\n    language: \"English\"\n  };\n\nexport default initial;","import initial from './initial';\n\nconst updateScore = (\n  state, \n    { player1, \n      player2, \n      server, \n      winner\n    }\n) => {\n  return {\n    ...state,\n    player1,\n    player2,\n    server,\n    winner,\n  }\n}\n\nconst startGame = (state, action) => {\n  return {\n    ...state,\n    showSettings: false,\n    gameId: action.gameId,\n    player1Name: action.player1Name,\n    player2Name: action.player2Name,\n    winningScore: action.winningScore,\n    serveInterval: action.serveInterval,\n  }\n}\n\nconst newGame = (state) => {\n  return {\n    ...initial,\n    language: state.language,\n    serveInterval: state.serveInterval,\n    winningScore: state.winningScore,\n    player1Name: state.player1Name,\n    player2Name: state.player2Name \n  }; // to newGame return initial state, but preserve game history, lanuage, and settings\n}\n\nconst toggleLanguage = state => {\n  return {\n    ...state,\n    language: state.language === \"English\" ? \"Esperanto\" : \"English\"\n  }\n}\n\nconst saveHistory = (state, action) => {\n  return {\n    ...state,\n    gameHistory: action.gameHistory,\n    historyLoaded: true,\n  }\n}\n\nconst removeGame = (state, action) => {\n  return {\n    ...state,\n    gameHistory: state.gameHistory.filter((game) => game.id !== action.id) // filter the game we want to remove from state\n  }\n}\n\nconst resumeGame = (\n  state, \n    { gameId, \n      player1, \n      player2, \n      player1Name, \n      player2Name, \n      winningScore, \n      serveInterval, \n      server\n  }) => {\n  return {\n    ...state,\n    showSettings: false,\n    gameId, \n    player1, \n    player2, \n    player1Name, \n    player2Name, \n    winningScore, \n    serveInterval, \n    server\n  }\n}\n\n// reducer function\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"UPDATE_SCORE\": return updateScore(state, action); // increment player score\n    case \"NEW_GAME\": return newGame(state); // after a game has been won, start a new game\n    case \"TOGGLE_LANGUAGE\": return toggleLanguage(state); // switch between languages\n    case \"START_GAME\": return startGame(state, action); // start a new game from the settings screen\n    case \"SAVE_HISTORY\": return saveHistory(state, action); // save history from API to state\n    case \"REMOVE_GAME\": return removeGame(state, action);\n    case \"RESUME_GAME\": return resumeGame(state, action);\n    default: return state;\n  }\n}\n\nexport default reducer;","import { createStore, compose, applyMiddleware } from 'redux';\n\nimport initial from './initial';\nimport reducer from './reducer';\nimport thunk from 'redux-thunk';\n\n  \n  // set up redux dev tools \n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n  // store set up\n  const store = createStore(\n    reducer,\n    initial,\n    composeEnhancers(applyMiddleware(thunk))\n  );\n  \n  export default store;","import React from 'react';\nimport ReactDOM from 'react-dom'; // renders React into the browser, could replace with ReactNative for an iOS app for example\nimport './index.css';\nimport App from './components/App';\nimport store from './data/store';\n\nimport { Provider } from 'react-redux';\n\n// Rendering\n\n// Strict mode gives you extra validation and warnings when you're building things. Newer is the latest 3mo\n// gets the root element from index.html\n\nReactDOM.render(\n  <React.StrictMode> \n    <Provider store={ store }> {/* provider has access to both Redux and React side of application, allows us to avoid prop drilling */}\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root') \n);\n\n\n"],"sourceRoot":""}